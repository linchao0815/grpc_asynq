// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: serverA.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerAClient is the client API for ServerA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerAClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	CallA(ctx context.Context, in *CallAReq, opts ...grpc.CallOption) (*CallAResp, error)
	Enqueue(ctx context.Context, in *TaskReq, opts ...grpc.CallOption) (*TaskResp, error)
	GameTest(ctx context.Context, in *GameTestReq, opts ...grpc.CallOption) (*GameTestResp, error)
	GameTest_CallBack(ctx context.Context, in *GameTestReply, opts ...grpc.CallOption) (*Empty, error)
}

type serverAClient struct {
	cc grpc.ClientConnInterface
}

func NewServerAClient(cc grpc.ClientConnInterface) ServerAClient {
	return &serverAClient{cc}
}

func (c *serverAClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/api.gen.ServerA/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAClient) CallA(ctx context.Context, in *CallAReq, opts ...grpc.CallOption) (*CallAResp, error) {
	out := new(CallAResp)
	err := c.cc.Invoke(ctx, "/api.gen.ServerA/CallA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAClient) Enqueue(ctx context.Context, in *TaskReq, opts ...grpc.CallOption) (*TaskResp, error) {
	out := new(TaskResp)
	err := c.cc.Invoke(ctx, "/api.gen.ServerA/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAClient) GameTest(ctx context.Context, in *GameTestReq, opts ...grpc.CallOption) (*GameTestResp, error) {
	out := new(GameTestResp)
	err := c.cc.Invoke(ctx, "/api.gen.ServerA/GameTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAClient) GameTest_CallBack(ctx context.Context, in *GameTestReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.gen.ServerA/GameTest_CallBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerAServer is the server API for ServerA service.
// All implementations must embed UnimplementedServerAServer
// for forward compatibility
type ServerAServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	CallA(context.Context, *CallAReq) (*CallAResp, error)
	Enqueue(context.Context, *TaskReq) (*TaskResp, error)
	GameTest(context.Context, *GameTestReq) (*GameTestResp, error)
	GameTest_CallBack(context.Context, *GameTestReply) (*Empty, error)
	mustEmbedUnimplementedServerAServer()
}

// UnimplementedServerAServer must be embedded to have forward compatible implementations.
type UnimplementedServerAServer struct {
}

func (UnimplementedServerAServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedServerAServer) CallA(context.Context, *CallAReq) (*CallAResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallA not implemented")
}
func (UnimplementedServerAServer) Enqueue(context.Context, *TaskReq) (*TaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedServerAServer) GameTest(context.Context, *GameTestReq) (*GameTestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameTest not implemented")
}
func (UnimplementedServerAServer) GameTest_CallBack(context.Context, *GameTestReply) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameTest_CallBack not implemented")
}
func (UnimplementedServerAServer) mustEmbedUnimplementedServerAServer() {}

// UnsafeServerAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerAServer will
// result in compilation errors.
type UnsafeServerAServer interface {
	mustEmbedUnimplementedServerAServer()
}

func RegisterServerAServer(s grpc.ServiceRegistrar, srv ServerAServer) {
	s.RegisterService(&ServerA_ServiceDesc, srv)
}

func _ServerA_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gen.ServerA/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerA_CallA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAServer).CallA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gen.ServerA/CallA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAServer).CallA(ctx, req.(*CallAReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerA_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gen.ServerA/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAServer).Enqueue(ctx, req.(*TaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerA_GameTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAServer).GameTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gen.ServerA/GameTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAServer).GameTest(ctx, req.(*GameTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerA_GameTest_CallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameTestReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAServer).GameTest_CallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gen.ServerA/GameTest_CallBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAServer).GameTest_CallBack(ctx, req.(*GameTestReply))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerA_ServiceDesc is the grpc.ServiceDesc for ServerA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gen.ServerA",
	HandlerType: (*ServerAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ServerA_Login_Handler,
		},
		{
			MethodName: "CallA",
			Handler:    _ServerA_CallA_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _ServerA_Enqueue_Handler,
		},
		{
			MethodName: "GameTest",
			Handler:    _ServerA_GameTest_Handler,
		},
		{
			MethodName: "GameTest_CallBack",
			Handler:    _ServerA_GameTest_CallBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverA.proto",
}
