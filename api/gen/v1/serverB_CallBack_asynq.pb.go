// Code generated by protoc-gen-go-asynqgen. DO NOT EDIT.
// versions:
// protoc-gen-go-asynqgen v1.0.10

package v1

import (
	context "context"
	json "encoding/json"
	asynq "github.com/hibiken/asynq"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

import (
	"fmt"
	"net/http"
	"myasynq"
	"strings"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/attribute"
	rkgrpcctx "github.com/rookie-ninja/rk-grpc/v2/middleware/context"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the asynq package it is being compiled against.
var _ = new(context.Context)
var _ = new(asynq.Task)
var _ = new(emptypb.Empty)
var _ = new(proto.Message)
var _ = new(json.InvalidUTF8Error)

type ServerB_CallBackJobServer interface {
	CallB_CallBack(context.Context, *CallBReply) error
}

func RegisterServerB_CallBackJobServer(mux *asynq.ServeMux, srv ServerB_CallBackJobServer) {
	mux.HandleFunc("ServerB_CallBack:CallB_CallBack", _ServerB_CallBack_CallB_CallBack_Job_Handler(srv))
}

func _ServerB_CallBack_CallB_CallBack_Job_Handler(srv ServerB_CallBackJobServer) func(context.Context, *asynq.Task) error {
	return func(ctx context.Context, task *asynq.Task) error {
		var in CallBReply
		t := &myasynq.TaskPaylod{In: &in}
		if err := json.Unmarshal(task.Payload(), &t); err != nil {
			return fmt.Errorf("%s req=%s err=%s", task.Type(), t, err)
		}
		ctx, span := myasynq.NewSpan(ctx, "CallB_CallBack")
		err := srv.CallB_CallBack(ctx, t.In.(*CallBReply))
		span.SetAttributes(attribute.String("req", myasynq.ToMarshal(t)))
		myasynq.EndSpan(span, err == nil)
		return err
	}
}

type ServerB_CallBackSvcJob struct{}

var ServerB_CallBackJob ServerB_CallBackSvcJob

func (j *ServerB_CallBackSvcJob) CallB_CallBack(ctx context.Context, in *CallBReply, opts ...asynq.Option) (*asynq.Task, *http.Header, error) {
	// get trace metadata
	header := http.Header{}
	rkgrpcctx.GetTracerPropagator(ctx).Inject(ctx, propagation.HeaderCarrier(header))
	payload, err := json.Marshal(myasynq.TaskPaylod{
		In:          in,
		TraceHeader: header,
	})
	if err != nil {
		return nil, nil, err
	}

	task := asynq.NewTask("ServerB_CallBack:CallB_CallBack", payload, opts...)
	return task, &header, nil
}

type ServerB_CallBackJobClient interface {
	CallB_CallBack(ctx context.Context, req *CallBReply, opts ...asynq.Option) (info *asynq.TaskInfo, err error)
}

type ServerB_CallBackJobClientImpl struct {
	cc *asynq.Client
}

func NewServerB_CallBackJobClient(client *asynq.Client) ServerB_CallBackJobClient {
	return &ServerB_CallBackJobClientImpl{client}
}

func (c *ServerB_CallBackJobClientImpl) CallB_CallBack(ctx context.Context, in *CallBReply, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	task, header, err := ServerB_CallBackJob.CallB_CallBack(ctx, in, opts...)
	if err != nil {
		return nil, fmt.Errorf("ServerA_TaskJob.GameTest_Task req:%s err:%s", in, err)
	}
	info, err := c.cc.Enqueue(task)
	if err != nil {
		return nil, fmt.Errorf("ServerA_TaskJob.GameTest_Task Enqueue req:%s err:%s", in, err)
	}
	// 把 Trace 信息，存入 Metadata，以 Header 的形式返回给 httpclient
	for k, v := range *header {
		rkgrpcctx.AddHeaderToClient(ctx, k, strings.Join(v, ","))
	}
	return info, nil
}
